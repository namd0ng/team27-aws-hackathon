AWSTemplateFormatVersion: '2010-09-09'
Description: 'AlcoLook - Sensor Data Analytics Stack (Privacy-First)'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: alcolook
    Description: Project name for resource naming

Resources:
  # S3 Bucket for anonymized sensor analytics
  SensorAnalyticsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-sensor-analytics-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt GyroscopeAnalysisFunction.Arn
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda for gyroscope data analysis
  GyroscopeAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-gyroscope-analysis-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          import math
          
          def handler(event, context):
              # Analyze gyroscope stability patterns
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  # Process anonymized gyroscope data
                  s3 = boto3.client('s3')
                  obj = s3.get_object(Bucket=bucket, Key=key)
                  data = json.loads(obj['Body'].read())
                  
                  # Calculate stability metrics
                  stability_score = calculate_stability(data)
                  
                  # Store results (no personal data)
                  result = {
                      'timestamp': data.get('timestamp'),
                      'stability_score': stability_score,
                      'analysis_version': '1.0'
                  }
                  
                  print(f"Stability analysis: {stability_score}")
              
              return {'statusCode': 200}
          
          def calculate_stability(gyro_data):
              # Simple stability calculation
              movements = gyro_data.get('movements', [])
              if not movements:
                  return 0.5
              
              total_magnitude = sum(m.get('magnitude', 0) for m in movements)
              avg_magnitude = total_magnitude / len(movements)
              
              # Convert to stability score (0-1, higher = more stable)
              return max(0, min(1, 1 - (avg_magnitude / 5.0)))
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Heart rate pattern analysis function
  HeartRateAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-heartrate-analysis-${Environment}'
      Runtime: python3.9
      Handler: index.handler
      Code:
        ZipFile: |
          import json
          import boto3
          
          def handler(event, context):
              # Analyze heart rate variability patterns
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  
                  s3 = boto3.client('s3')
                  obj = s3.get_object(Bucket=bucket, Key=key)
                  data = json.loads(obj['Body'].read())
                  
                  # Calculate HRV metrics (anonymized)
                  hrv_score = calculate_hrv(data)
                  
                  result = {
                      'timestamp': data.get('timestamp'),
                      'hrv_score': hrv_score,
                      'analysis_version': '1.0'
                  }
                  
                  print(f"HRV analysis: {hrv_score}")
              
              return {'statusCode': 200}
          
          def calculate_hrv(hr_data):
              # Heart rate variability calculation
              bpm = hr_data.get('bpm', 70)
              resting_bpm = hr_data.get('resting_bpm', 70)
              
              # Calculate percentage change
              if resting_bpm > 0:
                  change_percent = abs(bpm - resting_bpm) / resting_bpm
                  return min(1.0, change_percent)
              
              return 0.0
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${SensorAnalyticsBucket}/*'

  # S3 Lambda permission
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GyroscopeAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub '${SensorAnalyticsBucket}/*'

  # CloudWatch Dashboard for sensor analytics
  SensorAnalyticsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-sensor-analytics-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${GyroscopeAnalysisFunction}"],
                  ["AWS/Lambda", "Duration", "FunctionName", "${GyroscopeAnalysisFunction}"],
                  ["AWS/Lambda", "Errors", "FunctionName", "${GyroscopeAnalysisFunction}"]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "Gyroscope Analysis Metrics"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/S3", "NumberOfObjects", "BucketName", "${SensorAnalyticsBucket}"],
                  ["AWS/S3", "BucketSizeBytes", "BucketName", "${SensorAnalyticsBucket}"]
                ],
                "period": 86400,
                "stat": "Average",
                "region": "us-east-1",
                "title": "Sensor Data Storage"
              }
            }
          ]
        }

Outputs:
  SensorAnalyticsBucketName:
    Description: S3 bucket for sensor analytics
    Value: !Ref SensorAnalyticsBucket
    Export:
      Name: !Sub '${ProjectName}-sensor-bucket-${Environment}'

  GyroscopeAnalysisFunctionArn:
    Description: Gyroscope analysis Lambda function ARN
    Value: !GetAtt GyroscopeAnalysisFunction.Arn
    Export:
      Name: !Sub '${ProjectName}-gyroscope-function-${Environment}'

  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-sensor-analytics-${Environment}'
