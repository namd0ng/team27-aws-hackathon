AWSTemplateFormatVersion: '2010-09-09'
Description: 'AlcoLook Backend Infrastructure'

Resources:
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: alcolook-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  PasswordResetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: alcolook-password-resets
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: reset_token
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: reset_token
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt UsersTable.Arn
                  - !GetAtt PasswordResetsTable.Arn
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # Lambda Functions
  UserRegisterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: alcolook-user-register
      Runtime: python3.9
      Handler: user_register.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Lambda function code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function not deployed yet'}
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret

  UserLoginFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: alcolook-user-login
      Runtime: python3.9
      Handler: user_login.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Lambda function code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function not deployed yet'}
      Environment:
        Variables:
          JWT_SECRET: !Ref JWTSecret

  ForgotPasswordFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: alcolook-forgot-password
      Runtime: python3.9
      Handler: forgot_password.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # Lambda function code will be deployed separately
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Function not deployed yet'}

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: alcolook-api
      Description: AlcoLook Backend API
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth

  RegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref AuthResource
      PathPart: register

  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref AuthResource
      PathPart: login

  ForgotPasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref AuthResource
      PathPart: forgotpassword

  # API Gateway Methods
  RegisterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RegisterResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserRegisterFunction.Arn}/invocations'

  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref LoginResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserLoginFunction.Arn}/invocations'

  ForgotPasswordMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ForgotPasswordResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ForgotPasswordFunction.Arn}/invocations'

  # Lambda Permissions
  RegisterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserRegisterFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/register'

  LoginLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref UserLoginFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/login'

  ForgotPasswordLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ForgotPasswordFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/forgotpassword'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RegisterMethod
      - LoginMethod
      - ForgotPasswordMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Parameters:
  JWTSecret:
    Type: String
    Default: 'your-jwt-secret-key-change-this'
    Description: JWT Secret Key for token signing
    NoEcho: true

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  UsersTableName:
    Description: Users DynamoDB Table Name
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-UsersTable'
