AWSTemplateFormatVersion: '2010-09-09'
Description: 'AlcoLook Profile DynamoDB Table and Lambda API'

Resources:
  AlcoLookProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AlcoLookProfiles
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  ProfileLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt AlcoLookProfilesTable.Arn

  ProfileLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: alcolook-profile-api
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt ProfileLambdaRole.Arn
      Code:
        ZipFile: |
          // Lambda 코드는 별도 배포 필요
          exports.handler = async (event) => {
            return { statusCode: 200, body: JSON.stringify({ message: 'Deploy code separately' }) };
          };

  ProfileApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: alcolook-profile-api
      Description: AlcoLook Profile API

  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProfileApiGateway
      ParentId: !GetAtt ProfileApiGateway.RootResourceId
      PathPart: profile

  UserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ProfileApiGateway
      ParentId: !Ref ProfileResource
      PathPart: '{userId}'

  ProfileMethodAny:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ProfileApiGateway
      ResourceId: !Ref UserIdResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileLambdaFunction.Arn}/invocations'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProfileLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${ProfileApiGateway}/*/*'

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProfileMethodAny
    Properties:
      RestApiId: !Ref ProfileApiGateway
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ProfileApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  TableName:
    Description: DynamoDB table name
    Value: !Ref AlcoLookProfilesTable
