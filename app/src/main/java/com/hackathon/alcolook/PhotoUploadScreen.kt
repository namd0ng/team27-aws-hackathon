package com.hackathon.alcolook

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.launch

@Composable
fun PhotoUploadScreen(
    photoDrunkDetectionService: PhotoDrunkDetectionService,
    onBackToCamera: () -> Unit,
    onSaveRecord: (Float) -> Unit = {}
) {
    val context = LocalContext.current
    val coroutineScope = rememberCoroutineScope()
    
    var selectedImageUri by remember { mutableStateOf<Uri?>(null) }
    var selectedBitmap by remember { mutableStateOf<Bitmap?>(null) }
    var faces by remember { mutableStateOf<List<FaceBox>>(emptyList()) }
    var isAnalyzing by remember { mutableStateOf(false) }
    var analysisResult by remember { mutableStateOf<DrunkDetectionResult?>(null) }
    var selectedFaceIndex by remember { mutableStateOf<Int?>(null) }
    
    val imagePickerLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        selectedImageUri = uri
        uri?.let {
            try {
                val inputStream = context.contentResolver.openInputStream(it)
                val bitmap = BitmapFactory.decodeStream(inputStream)
                selectedBitmap = bitmap
                faces = emptyList()
                analysisResult = null
                selectedFaceIndex = null
            } catch (e: Exception) {
                // Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå®
            }
        }
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // ÏÉÅÎã® Ï†úÎ™©
        Text(
            text = "ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú Î™®Îìú",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(vertical = 16.dp)
        )
        
        // Ïù¥ÎØ∏ÏßÄ ÌëúÏãú ÏòÅÏó≠
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            selectedBitmap?.let { bitmap ->
                Image(
                    bitmap = bitmap.asImageBitmap(),
                    contentDescription = "ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ",
                    modifier = Modifier.fillMaxSize(),
                    contentScale = ContentScale.Fit
                )
                
                // ÏñºÍµ¥ Î∞ïÏä§ Ïò§Î≤ÑÎ†àÏù¥ (Îã®ÏàúÌôîÎêú Ìò∏Ï∂ú)
                if (faces.isNotEmpty()) {
                    FaceDetectionOverlay(
                        faces = faces
                    )
                }
            } ?: run {
                // Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏùÑ Îïå ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                ) {
                    Text(
                        text = "üì∑",
                        fontSize = 64.sp
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = "ÏÇ¨ÏßÑÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî",
                        fontSize = 18.sp,
                        color = Color.Gray
                    )
                }
            }
        }
        
        // Î≤ÑÌäº ÏòÅÏó≠
        Column(
            modifier = Modifier.fillMaxWidth(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // ÏÇ¨ÏßÑ ÏÑ†ÌÉù Î≤ÑÌäº
            Button(
                onClick = { imagePickerLauncher.launch("image/*") },
                modifier = Modifier.fillMaxWidth(),
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF007AFF))
            ) {
                Text("ÏÇ¨ÏßÑ ÏÑ†ÌÉù", fontSize = 16.sp)
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Î∂ÑÏÑù Î≤ÑÌäº
            selectedBitmap?.let { bitmap ->
                Button(
                    onClick = {
                        isAnalyzing = true
                        coroutineScope.launch {
                            try {
                                val result = photoDrunkDetectionService.detectDrunkLevel(bitmap)
                                faces = result.faceBoxes
                                analysisResult = result
                                selectedFaceIndex = if (result.faceBoxes.isNotEmpty()) 0 else null
                            } finally {
                                isAnalyzing = false
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    enabled = !isAnalyzing,
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF34C759))
                ) {
                    if (isAnalyzing) {
                        CircularProgressIndicator(
                            modifier = Modifier.size(20.dp),
                            color = Color.White
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text("Î∂ÑÏÑù Ï§ë...")
                    } else {
                        Text("ÏùåÏ£ºÎèÑ Î∂ÑÏÑù", fontSize = 16.sp)
                    }
                }
                
                Spacer(modifier = Modifier.height(12.dp))
            }
            
            // Îã§Ï§ë ÏñºÍµ¥ ÏÑ†ÌÉù UI
            if (faces.size > 1) {
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF0F8FF))
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "üë• ${faces.size}Î™ÖÏù¥ Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. Í∏∞Î°ùÌï† ÏÇ¨ÎûåÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî:",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.SemiBold
                        )
                        
                        Spacer(modifier = Modifier.height(12.dp))
                        
                        faces.forEachIndexed { index, face ->
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 4.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                RadioButton(
                                    selected = selectedFaceIndex == index,
                                    onClick = { selectedFaceIndex = index }
                                )
                                Spacer(modifier = Modifier.width(8.dp))
                                Text(
                                    text = "${face.personId}: ${face.drunkPercentage}%",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = when {
                                        face.drunkPercentage < 30 -> Color(0xFF34C759)
                                        face.drunkPercentage < 60 -> Color(0xFFFF9500)
                                        else -> Color(0xFFFF3B30)
                                    }
                                )
                            }
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(12.dp))
            }
            
            // Î∂ÑÏÑù Í≤∞Í≥º Î∞è Í∏∞Î°ù Î≤ÑÌäº
            analysisResult?.let { result ->
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF8F8F8))
                ) {
                    Column(
                        modifier = Modifier.padding(16.dp)
                    ) {
                        Text(
                            text = "üìä Î∂ÑÏÑù Í≤∞Í≥º",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold
                        )
                        
                        Spacer(modifier = Modifier.height(8.dp))
                        
                        val selectedFace = selectedFaceIndex?.let { faces.getOrNull(it) }
                        val displayLevel = selectedFace?.drunkPercentage?.toFloat() ?: result.drunkPercentage
                        
                        Text(
                            text = if (faces.size > 1 && selectedFace != null) {
                                "${selectedFace.personId}: ${selectedFace.drunkPercentage}%"
                            } else {
                                "ÏùåÏ£ºÎèÑ: ${displayLevel.toInt()}%"
                            },
                            style = MaterialTheme.typography.headlineSmall,
                            fontWeight = FontWeight.Bold,
                            color = when {
                                displayLevel < 30 -> Color(0xFF34C759)
                                displayLevel < 60 -> Color(0xFFFF9500)
                                else -> Color(0xFFFF3B30)
                            }
                        )
                        
                        Spacer(modifier = Modifier.height(8.dp))
                        
                        Text(
                            text = result.message,
                            style = MaterialTheme.typography.bodyMedium,
                            color = Color.Gray
                        )
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        // Í∏∞Î°ù Î≤ÑÌäº
                        Button(
                            onClick = {
                                onSaveRecord(displayLevel)
                            },
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF007AFF))
                        ) {
                            Text(
                                text = "üíæ Í∏∞Î°ùÌïòÍ∏∞",
                                color = Color.White,
                                fontWeight = FontWeight.Bold,
                                fontSize = 16.sp
                            )
                        }
                    }
                }
                
                Spacer(modifier = Modifier.height(12.dp))
            }
            
            // Ïã§ÏãúÍ∞Ñ Î™®ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞ Î≤ÑÌäº
            OutlinedButton(
                onClick = onBackToCamera,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Ïã§ÏãúÍ∞Ñ Ïπ¥Î©îÎùº Î™®ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞")
            }
        }
    }
}
