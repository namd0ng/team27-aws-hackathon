package com.hackathon.alcolook.ui

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Share
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hackathon.alcolook.data.*
import java.time.format.DateTimeFormatter

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun IntoxicationResultScreen(
    report: IntoxicationReport,
    onShare: () -> Unit = {},
    onSave: () -> Unit = {},
    onRetry: () -> Unit = {}
) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Ï†úÎ™©
        item {
            Text(
                text = "ÏùåÏ£º ÏÉÅÌÉú Î∂ÑÏÑù Í≤∞Í≥º",
                style = MaterialTheme.typography.headlineMedium,
                fontWeight = FontWeight.Bold,
                modifier = Modifier.fillMaxWidth(),
                textAlign = TextAlign.Center
            )
        }
        
        // ÏµúÏ¢Ö Í≤∞Í≥º Ïπ¥Îìú
        item {
            ResultSummaryCard(report)
        }
        
        // ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏÉÅÏÑ∏
        item {
            SensorDataCard(report.sensorData)
        }
        
        // AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú
        item {
            AnalysisReportCard(report)
        }
        
        // Í∂åÏû•ÏÇ¨Ìï≠
        item {
            RecommendationsCard(report.recommendations)
        }
        
        // Î©¥Ï±Ö Í≥†ÏßÄ
        item {
            DisclaimerCard()
        }
        
        // Ïï°ÏÖò Î≤ÑÌäºÎì§
        item {
            ActionButtons(
                onShare = onShare,
                onSave = onSave,
                onRetry = onRetry
            )
        }
    }
}

@Composable
private fun ResultSummaryCard(report: IntoxicationReport) {
    val (backgroundColor, textColor) = when (report.level) {
        IntoxicationLevel.NORMAL -> Color(0xFFE8F5E8) to Color(0xFF2E7D32)
        IntoxicationLevel.SLIGHTLY -> Color(0xFFFFF4E5) to Color(0xFFE65100)
        IntoxicationLevel.MODERATE -> Color(0xFFFFE0B2) to Color(0xFFBF360C)
        IntoxicationLevel.HEAVY -> Color(0xFFFDEBEC) to Color(0xFFC62828)
    }
    
    val levelText = when (report.level) {
        IntoxicationLevel.NORMAL -> "Ï†ïÏÉÅ"
        IntoxicationLevel.SLIGHTLY -> "Ï°∞Í∏à Ï∑®Ìï®"
        IntoxicationLevel.MODERATE -> "Ï†ÅÎãπÌûà Ï∑®Ìï®"
        IntoxicationLevel.HEAVY -> "Í≥ºÏùå"
    }
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = backgroundColor)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = levelText,
                style = MaterialTheme.typography.headlineLarge,
                fontWeight = FontWeight.Bold,
                color = textColor
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = "Ïã†Î¢∞ÎèÑ: ${(report.confidence * 100).toInt()}%",
                style = MaterialTheme.typography.bodyLarge,
                color = textColor
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            Text(
                text = report.summary,
                style = MaterialTheme.typography.bodyMedium,
                textAlign = TextAlign.Center,
                color = textColor
            )
        }
    }
}

@Composable
private fun SensorDataCard(sensorData: IntegratedSensorData) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìä ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // ÏñºÍµ¥ Ïù∏Ïãù Îç∞Ïù¥ÌÑ∞
            SensorDataRow(
                title = "üë§ ÏñºÍµ¥ Ïù∏Ïãù",
                items = listOf(
                    "Ïã†Î¢∞ÎèÑ: ${(sensorData.faceAnalysis.confidence * 100).toInt()}%",
                    "Îàà ÏÉÅÌÉú: ${if (sensorData.faceAnalysis.eyesClosed) "Í∞êÍπÄ" else "Îú∏"}",
                    "ÏûÖ ÏÉÅÌÉú: ${if (sensorData.faceAnalysis.mouthOpen) "Î≤åÎ¶º" else "Îã§Î¨ºÏùå"}",
                    "Í∏∞Ïö∏Í∏∞: ${sensorData.faceAnalysis.faceAngle.toInt()}¬∞"
                )
            )
            
            Divider(modifier = Modifier.padding(vertical = 8.dp))
            
            // Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞
            SensorDataRow(
                title = "‚ù§Ô∏è Ïã¨Î∞ïÏàò",
                items = listOf(
                    "Ïã¨Î∞ïÏàò: ${sensorData.heartRate.bpm} BPM",
                    "Î≥ÄÏù¥ÎèÑ: ${String.format("%.2f", sensorData.heartRate.variability)}",
                    "Ï∏°Ï†ïÏãúÍ∞Ñ: ${sensorData.heartRate.measurementDuration}Ï¥à"
                )
            )
            
            Divider(modifier = Modifier.padding(vertical = 8.dp))
            
            // ÏûêÏù¥Î°úÏÑºÏÑú Îç∞Ïù¥ÌÑ∞
            SensorDataRow(
                title = "üì± ÏõÄÏßÅÏûÑ ÏÑºÏÑú",
                items = listOf(
                    "ÌùîÎì§Î¶º: ${(sensorData.gyroscope.shakingIntensity * 100).toInt()}%",
                    "ÏïàÏ†ïÏÑ±: ${(sensorData.gyroscope.stabilityScore * 100).toInt()}%",
                    "ÏµúÎåÄÏõÄÏßÅÏûÑ: ${String.format("%.2f", sensorData.gyroscope.peakMovement)}"
                )
            )
        }
    }
}

@Composable
private fun SensorDataRow(title: String, items: List<String>) {
    Column {
        Text(
            text = title,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.SemiBold
        )
        Spacer(modifier = Modifier.height(4.dp))
        items.forEach { item ->
            Text(
                text = "‚Ä¢ $item",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(start = 8.dp, bottom = 2.dp)
            )
        }
    }
}

@Composable
private fun AnalysisReportCard(report: IntoxicationReport) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "ü§ñ AI Î∂ÑÏÑù Î≥¥Í≥†ÏÑú",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            Text(
                text = report.detailedAnalysis,
                style = MaterialTheme.typography.bodyMedium,
                lineHeight = 20.sp
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = "Î∂ÑÏÑù ÏãúÍ∞Ñ: ${report.timestamp.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

@Composable
private fun RecommendationsCard(recommendations: List<String>) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üí° Í∂åÏû•ÏÇ¨Ìï≠",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            recommendations.forEachIndexed { index, recommendation ->
                Row(
                    modifier = Modifier.padding(bottom = 8.dp)
                ) {
                    Text(
                        text = "${index + 1}. ",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.SemiBold
                    )
                    Text(
                        text = recommendation,
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.weight(1f)
                    )
                }
            }
        }
    }
}

@Composable
private fun DisclaimerCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF3E0))
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "‚ö†Ô∏è Î©¥Ï±Ö Í≥†ÏßÄ",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE65100)
            )
            
            Spacer(modifier = Modifier.height(8.dp))
            
            Text(
                text = "Î≥∏ Î∂ÑÏÑù Í≤∞Í≥ºÎäî ÏùòÎ£å Î™©Ï†ÅÏù¥ ÏïÑÎãàÎ©∞, Ïö¥Ï†Ñ Í∞ÄÎä• Ïó¨Î∂ÄÎ•º ÌåêÎã®ÌïòÎäî Í∏∞Ï§ÄÏúºÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏùåÏ£º ÌõÑÏóêÎäî Î∞òÎìúÏãú ÎåÄÏ§ëÍµêÌÜµÏùÑ Ïù¥Ïö©ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.",
                style = MaterialTheme.typography.bodySmall,
                color = Color(0xFFBF360C),
                lineHeight = 16.sp
            )
        }
    }
}

@Composable
private fun ActionButtons(
    onShare: () -> Unit,
    onSave: () -> Unit,
    onRetry: () -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        OutlinedButton(
            onClick = onShare,
            modifier = Modifier.weight(1f)
        ) {
            Icon(Icons.Default.Share, contentDescription = null)
            Spacer(modifier = Modifier.width(4.dp))
            Text("Í≥µÏú†")
        }
        
        FilledTonalButton(
            onClick = onSave,
            modifier = Modifier.weight(1f)
        ) {
            Text("üíæ")
            Spacer(modifier = Modifier.width(4.dp))
            Text("Í≤∞Í≥º Í∏∞Î°ù")
        }
        
        Button(
            onClick = onRetry,
            modifier = Modifier.weight(1f)
        ) {
            Icon(Icons.Default.Refresh, contentDescription = null)
            Spacer(modifier = Modifier.width(4.dp))
            Text("Îã§Ïãú")
        }
    }
}
