package com.hackathon.alcolook.ui.calendar

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hackathon.alcolook.ui.theme.WarningSoft
import com.hackathon.alcolook.ui.theme.DangerSoft

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CalendarScreen() {
    var selectedTab by remember { mutableIntStateOf(0) }
    val tabs = listOf("ÏõîÎ≥Ñ", "ÌÜµÍ≥Ñ")
    
    Column(
        modifier = Modifier.fillMaxSize()
    ) {
        // Header
        Text(
            text = "Ï∫òÎ¶∞Îçî",
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.padding(16.dp)
        )
        
        // ÌÉ≠ Ìñâ
        TabRow(
            selectedTabIndex = selectedTab,
            modifier = Modifier.fillMaxWidth()
        ) {
            tabs.forEachIndexed { index, title ->
                Tab(
                    selected = selectedTab == index,
                    onClick = { selectedTab = index },
                    text = { Text(title) }
                )
            }
        }
        
        // ÌÉ≠ ÏΩòÌÖêÏ∏†
        when (selectedTab) {
            0 -> MonthlyCalendarContent()
            1 -> StatisticsContent()
        }
    }
}

@Composable
private fun MonthlyCalendarContent() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Ïõî Ìó§Îçî
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "2025ÎÖÑ 1Ïõî",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            TextButton(onClick = { /* TODO: Date picker */ }) {
                Text("ÎÇ†Ïßú Ïù¥Îèô")
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Ï∫òÎ¶∞Îçî Í∑∏Î¶¨Îìú
        val daysOfWeek = listOf("Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†")
        val daysInMonth = (1..31).toList()
        
        // ÏöîÏùº Ìó§Îçî
        LazyVerticalGrid(
            columns = GridCells.Fixed(7),
            modifier = Modifier.fillMaxWidth()
        ) {
            items(daysOfWeek) { day ->
                Text(
                    text = day,
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.bodySmall,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(8.dp)
                )
            }
            
            items(daysInMonth) { day ->
                CalendarDayCell(
                    day = day,
                    status = when {
                        day % 7 == 0 -> DrinkingStatus.DANGER // Ìè≠Ïùå
                        day % 5 == 0 -> DrinkingStatus.WARNING // Ï£ºÏùò
                        else -> DrinkingStatus.NORMAL // ÏñëÌò∏
                    }
                )
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // ÏÑ†ÌÉùÎêú ÎÇ†Ïßú Í∏∞Î°ù
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "1Ïõî 15Ïùº Í∏∞Î°ù",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "ÏïÑÏßÅ Í∏∞Î°ùÏù¥ ÏóÜÏñ¥Ïöî",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
private fun StatisticsContent() {
    var selectedPeriod by remember { mutableIntStateOf(0) }
    val periods = listOf("Ï£ºÍ∞Ñ ÏöîÏïΩ", "ÏõîÍ∞Ñ ÏöîÏïΩ")
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Í∏∞Í∞Ñ ÌÜ†Í∏Ä
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Center
        ) {
            periods.forEachIndexed { index, period ->
                FilterChip(
                    onClick = { selectedPeriod = index },
                    label = { Text(period) },
                    selected = selectedPeriod == index,
                    modifier = Modifier.padding(horizontal = 4.dp)
                )
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        // Ï∫êÎ¶≠ÌÑ∞ ÏΩîÎ©òÌä∏ Ïπ¥Îìú
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "üêï",
                    fontSize = 48.sp
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Ïù¥Î≤à Ï£ºÎäî Í±¥Í∞ïÌïú Ìïú Ï£ºÏòÄÏñ¥Ïöî!",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.Medium
                )
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        // Í±¥Í∞ï ÏßÄÏàò Ïπ¥Îìú
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "Í±¥Í∞ï ÏßÄÏàò",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(12.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    HealthStatusBadge("ÏñëÌò∏", 5, Color(0xFF4CAF50))
                    HealthStatusBadge("Ï£ºÏùò", 1, Color(0xFFFF9800))
                    HealthStatusBadge("Ìè≠Ïùå", 0, Color(0xFFF44336))
                }
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Ï£ºÍ∞Ñ Ìä∏Î†åÎìú (Í∞ÑÎã®Ìïú ÎßâÎåÄ Ï∞®Ìä∏)
        Card(
            modifier = Modifier.fillMaxWidth(),
            shape = RoundedCornerShape(12.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "Ï£ºÎ≥Ñ Ìä∏Î†åÎìú",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(12.dp))
                
                // Í∞ÑÎã®Ìïú ÎßâÎåÄ Ï∞®Ìä∏ ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly,
                    verticalAlignment = Alignment.Bottom
                ) {
                    repeat(7) { index ->
                        val height = (20 + index * 10).dp
                        Box(
                            modifier = Modifier
                                .width(24.dp)
                                .height(height)
                                .background(
                                    MaterialTheme.colorScheme.primary,
                                    RoundedCornerShape(4.dp)
                                )
                        )
                    }
                }
            }
        }
    }
}

// Ï∫òÎ¶∞Îçî ÎÇ†Ïßú ÏÖÄ Ïª¥Ìè¨ÎÑåÌä∏
@Composable
private fun CalendarDayCell(
    day: Int,
    status: DrinkingStatus
) {
    val backgroundColor = when (status) {
        DrinkingStatus.WARNING -> WarningSoft
        DrinkingStatus.DANGER -> DangerSoft
        else -> Color.Transparent
    }
    
    Box(
        modifier = Modifier
            .size(40.dp)
            .clip(CircleShape)
            .background(backgroundColor),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = day.toString(),
            style = MaterialTheme.typography.bodyMedium,
            textAlign = TextAlign.Center
        )
    }
}

// Í±¥Í∞ï ÏÉÅÌÉú Î∞∞ÏßÄ Ïª¥Ìè¨ÎÑåÌä∏
@Composable
private fun HealthStatusBadge(
    label: String,
    count: Int,
    color: Color
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = Modifier
                .size(12.dp)
                .clip(CircleShape)
                .background(color)
        )
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall
        )
        Text(
            text = "${count}Ïùº",
            style = MaterialTheme.typography.bodySmall,
            fontWeight = FontWeight.Bold
        )
    }
}

// ÏùåÏ£º ÏÉÅÌÉú Ïó¥Í±∞Ìòï
enum class DrinkingStatus {
    NORMAL, WARNING, DANGER
}