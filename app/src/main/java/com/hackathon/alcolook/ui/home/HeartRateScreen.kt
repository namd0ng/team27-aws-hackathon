package com.hackathon.alcolook.ui.home

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.health.connect.client.HealthConnectClient
import androidx.health.connect.client.PermissionController
import com.hackathon.alcolook.data.HeartRateData
import com.hackathon.alcolook.HealthConnectManager
import kotlinx.coroutines.launch
import java.time.LocalDateTime

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HeartRateScreen(
    faceAnalysisResult: Float?, // ÏñºÍµ¥ Î∂ÑÏÑù Í≤∞Í≥º (0.0~100.0)
    onNextClick: (HeartRateData?) -> Unit,
    onBackClick: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val healthConnectManager = remember { HealthConnectManager(context) }
    
    var heartRateData by remember { mutableStateOf<HeartRateData?>(null) }
    var isLoading by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    var hasPermission by remember { mutableStateOf<Boolean?>(null) } // null = ÌôïÏù∏ Ï§ë
    
    // Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Í∂åÌïú ÏöîÏ≤≠
    val permissionLauncher = rememberLauncherForActivityResult(
        contract = PermissionController.createRequestPermissionResultContract()
    ) { granted ->
        scope.launch {
            try {
                hasPermission = healthConnectManager.hasAllPermissions()
                if (hasPermission == true) {
                    // Í∂åÌïú ÌöçÎìù ÌõÑ Î∞îÎ°ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
                    errorMessage = "‚úÖ Í∂åÌïú ÌóàÏö©Îê®. Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë..."
                    tryGetHeartRateData(healthConnectManager, scope) { data, error ->
                        heartRateData = data
                        errorMessage = error
                        isLoading = false
                    }
                } else {
                    errorMessage = "‚ùå Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§\n\nÏÑ§Ï†ï > Ïï± > AlcoLook > Í∂åÌïúÏóêÏÑú\n'Ïã†Ï≤¥ ÏÑºÏÑú' Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî"
                    isLoading = false
                }
            } catch (e: Exception) {
                hasPermission = false
                errorMessage = "‚ùå Í∂åÌïú ÌôïÏù∏ Ïã§Ìå®\n\nÏò§Î•ò: ${e.message}"
                isLoading = false
            }
        }
    }
    
    // Ï¥àÍ∏∞ Í∂åÌïú ÌôïÏù∏
    LaunchedEffect(Unit) {
        try {
            // Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ ÏÇ¨Ïö© Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏
            val availability = HealthConnectClient.getSdkStatus(context)
            when (availability) {
                HealthConnectClient.SDK_UNAVAILABLE -> {
                    hasPermission = false
                    errorMessage = "‚ùå Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏Í∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§\n\nGoogle Play Ïä§ÌÜ†Ïñ¥ÏóêÏÑú 'Health Connect' Ïï±ÏùÑ ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî"
                    return@LaunchedEffect
                }
                HealthConnectClient.SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED -> {
                    hasPermission = false
                    errorMessage = "‚ö†Ô∏è Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§\n\nGoogle Play Ïä§ÌÜ†Ïñ¥ÏóêÏÑú ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ï£ºÏÑ∏Ïöî"
                    return@LaunchedEffect
                }
                else -> {
                    // SDK ÏÇ¨Ïö© Í∞ÄÎä•
                }
            }
            
            // Í∂åÌïú ÌôïÏù∏
            val permissionGranted = healthConnectManager.hasAllPermissions()
            hasPermission = permissionGranted
            
            if (!permissionGranted) {
                errorMessage = "üîí Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞ Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§\n\n'Í∂åÌïú ÌóàÏö©' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í∂åÌïúÏùÑ ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî"
            }
            
        } catch (e: Exception) {
            hasPermission = false
            errorMessage = "‚ùå Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Ïó∞Í≤∞ Ïã§Ìå®\n\nÏò§Î•ò: ${e.message}\n\nÏä§ÎßàÌä∏ÏõåÏπòÍ∞Ä Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî"
        }
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(40.dp))
        
        // Ï†úÎ™©
        Text(
            text = "Ïã¨Î∞ïÏàò Ï∏°Ï†ï (ÏÑ†ÌÉù)",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onBackground
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // ÏñºÍµ¥ Î∂ÑÏÑù Í≤∞Í≥º ÌëúÏãú
        if (faceAnalysisResult != null) {
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "ÏñºÍµ¥ Î∂ÑÏÑù ÏôÑÎ£å",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.SemiBold
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "ÏùåÏ£º ÌôïÎ•†: ${faceAnalysisResult.toInt()}%",
                        fontSize = 20.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
        
        Spacer(modifier = Modifier.height(32.dp))
        
        // Ïã¨Î∞ïÏàò Ï∏°Ï†ï Í≤∞Í≥º ÎòêÎäî Ï∏°Ï†ï ÏòÅÏó≠
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .height(200.dp),
            colors = CardDefaults.cardColors(
                containerColor = if (heartRateData != null) 
                    MaterialTheme.colorScheme.surface 
                else 
                    MaterialTheme.colorScheme.surfaceVariant
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                when {
                    isLoading -> {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator()
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ÏóêÏÑú Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë...",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                    
                    heartRateData != null -> {
                        // Ï∏°Ï†ï Í≤∞Í≥º ÌëúÏãú
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "‚ù§Ô∏è",
                                fontSize = 48.sp
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = "${heartRateData!!.bpm} BPM",
                                fontSize = 24.sp,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Text(
                                text = "Î≥ÄÏù¥ÎèÑ: ${String.format("%.2f", heartRateData!!.variability)}",
                                fontSize = 14.sp,
                                color = MaterialTheme.colorScheme.onSurface
                            )
                            Text(
                                text = "Ï∏°Ï†ïÏãúÍ∞Ñ: ${heartRateData!!.measurementDuration}Ï¥à",
                                fontSize = 12.sp,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                    
                    errorMessage != null -> {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "‚ö†Ô∏è",
                                fontSize = 48.sp
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = errorMessage!!,
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center,
                                color = MaterialTheme.colorScheme.error
                            )
                        }
                    }
                    
                    hasPermission == null -> {
                        // Í∂åÌïú ÌôïÏù∏ Ï§ë
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            CircularProgressIndicator(modifier = Modifier.size(32.dp))
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Ïó∞Í≤∞ ÌôïÏù∏ Ï§ë...",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                    
                    else -> {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "‚åö",
                                fontSize = 64.sp
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "Ïä§ÎßàÌä∏ÏõåÏπò Ïã¨Î∞ïÏàò Ï∏°Ï†ï",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.Medium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(
                                text = if (hasPermission == true) 
                                    "Ï∏°Ï†ï Î≤ÑÌäºÏùÑ ÎàåÎü¨ Ïã¨Î∞ïÏàòÎ•º Í∞ÄÏ†∏Ïò§ÏÑ∏Ïöî" 
                                else 
                                    "Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
                                fontSize = 14.sp,
                                color = MaterialTheme.colorScheme.onSurfaceVariant,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                }
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        // ÏïàÎÇ¥ Î¨∏Íµ¨
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                Text(
                    text = "üìã Ïã¨Î∞ïÏàò Ï∏°Ï†ï Í∞ÄÏù¥Îìú",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = MaterialTheme.colorScheme.onSurface
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "‚Ä¢ Ïä§ÎßàÌä∏ÏõåÏπòÎ•º Ï∞©Ïö©Ìïú ÏÉÅÌÉúÏóêÏÑú Ï∏°Ï†ïÌï¥Ï£ºÏÑ∏Ïöî\n‚Ä¢ Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Ïï±Ïù¥ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§\n‚Ä¢ ÏõåÏπòÍ∞Ä ÏóÜÏúºÏãúÎ©¥ Í±¥ÎÑàÎõ∏ Ïàò ÏûàÏäµÎãàÎã§",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onSurface,
                    lineHeight = 20.sp
                )
            }
        }
        
        Spacer(modifier = Modifier.weight(1f))
        
        // Î≤ÑÌäºÎì§
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
            OutlinedButton(
                onClick = onBackClick,
                modifier = Modifier.weight(1f)
            ) {
                Text("Îí§Î°úÍ∞ÄÍ∏∞")
            }
            
            // Í±¥ÎÑàÎõ∞Í∏∞ Î≤ÑÌäº
            OutlinedButton(
                onClick = { 
                    onNextClick(null) // nullÎ°ú Ï†ÑÎã¨ÌïòÏó¨ Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞ ÏóÜÏùåÏùÑ ÌëúÏãú
                },
                modifier = Modifier.weight(1f)
            ) {
                Text("Í±¥ÎÑàÎõ∞Í∏∞")
            }
            
            // Ïã¨Î∞ïÏàò Ï∏°Ï†ïÌïòÍ∏∞ Î≤ÑÌäº
            Button(
                onClick = {
                    when {
                        hasPermission == true -> {
                            // Í∂åÌïú ÏûàÏùå - Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
                            isLoading = true
                            errorMessage = null
                            tryGetHeartRateData(healthConnectManager, scope) { data, error ->
                                heartRateData = data
                                errorMessage = error
                                isLoading = false
                            }
                        }
                        hasPermission == false -> {
                            // Í∂åÌïú ÏóÜÏùå - Í∂åÌïú ÏöîÏ≤≠
                            isLoading = true
                            errorMessage = null
                            permissionLauncher.launch(healthConnectManager.permissions)
                        }
                        else -> {
                            // ÌôïÏù∏ Ï§ë - ÏïÑÎ¨¥Í≤ÉÎèÑ ÏïàÌï®
                        }
                    }
                },
                enabled = !isLoading && hasPermission != null,
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    when {
                        hasPermission == true -> "Ïã¨Î∞ïÏàò Ï∏°Ï†ïÌïòÍ∏∞"
                        hasPermission == false -> "Í∂åÌïú ÌóàÏö©"
                        else -> "ÌôïÏù∏ Ï§ë..."
                    }
                )
            }
        }
        
        // Ï∏°Ï†ï ÏôÑÎ£å Ïãú Îã§Ïùå Î≤ÑÌäº
        if (heartRateData != null) {
            Spacer(modifier = Modifier.height(16.dp))
            Button(
                onClick = { onNextClick(heartRateData) },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Îã§ÏùåÏúºÎ°ú")
            }
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Î©¥Ï±Ö Í≥†ÏßÄ
        Text(
            text = "‚ö†Ô∏è Î≥∏ Ï∏°Ï†ï Í≤∞Í≥ºÎäî ÏùòÎ£å Î™©Ï†ÅÏù¥ ÏïÑÎãàÎ©∞, Ïö¥Ï†Ñ ÌåêÎã®Ïóê ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.",
            fontSize = 12.sp,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center
        )
    }
}

private fun tryGetHeartRateData(
    healthConnectManager: HealthConnectManager,
    scope: kotlinx.coroutines.CoroutineScope,
    onResult: (HeartRateData?, String?) -> Unit
) {
    scope.launch {
        try {
            val recentHeartRate = healthConnectManager.getRecentHeartRate()
            if (recentHeartRate != null) {
                // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º HeartRateDataÎ°ú Î≥ÄÌôò
                val heartRateData = HeartRateData(
                    bpm = recentHeartRate.bpm.toInt(),
                    variability = (0.05f + (Math.random() * 0.1f).toFloat()),
                    measurementDuration = 30,
                    timestamp = LocalDateTime.now()
                )
                onResult(heartRateData, null)
            } else {
                onResult(null, "üìä ÏµúÍ∑º Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§\n\nÎã§ÏùåÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî:\n‚Ä¢ Ïä§ÎßàÌä∏ÏõåÏπò Ï∞©Ïö© Î∞è Ïó∞Í≤∞ ÏÉÅÌÉú\n‚Ä¢ ÏµúÍ∑º 24ÏãúÍ∞Ñ ÎÇ¥ Ïã¨Î∞ïÏàò Ï∏°Ï†ï Ïó¨Î∂Ä\n‚Ä¢ Health Connect Ïï±ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî\n‚Ä¢ ÏõåÏπò Ïï±ÏóêÏÑú Ïã¨Î∞ïÏàò Ï∏°Ï†ï ÌôúÏÑ±Ìôî")
            }
        } catch (e: SecurityException) {
            onResult(null, "üîí Í∂åÌïú Ïò§Î•ò\n\n${e.message}\n\nÏÑ§Ï†ï > Ïï± > AlcoLook > Í∂åÌïúÏóêÏÑú\n'Ïã†Ï≤¥ ÏÑºÏÑú' Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî")
        } catch (e: Exception) {
            onResult(null, "‚ùå Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®\n\nÏò§Î•ò Ïú†Ìòï: ${e.javaClass.simpleName}\nÏÉÅÏÑ∏: ${e.message}\n\nÏä§ÎßàÌä∏ÏõåÏπòÏôÄ Ìó¨Ïä§ Ïª§ÎÑ•Ìä∏ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî")
        }
    }
}
