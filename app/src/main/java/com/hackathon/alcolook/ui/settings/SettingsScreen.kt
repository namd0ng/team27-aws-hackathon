package com.hackathon.alcolook.ui.settings

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hackathon.alcolook.data.AuthManager
import com.hackathon.alcolook.data.repository.DynamoDBProfileRepository
import com.hackathon.alcolook.ui.theme.*
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    onLoginClick: () -> Unit = {}
) {
    val context = LocalContext.current
    val authManager = remember { AuthManager.getInstance(context) }
    val profileRepository = remember { DynamoDBProfileRepository(authManager) }
    val isLoggedIn by authManager.isLoggedIn.collectAsState()
    val userName by authManager.userName.collectAsState()
    
    // ÌîÑÎ°úÌïÑ ÏÉÅÌÉú
    var selectedGender by remember { mutableStateOf("ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå") }
    var ageInput by remember { mutableStateOf("") }
    var weeklyGoalInput by remember { mutableStateOf("") }
    var showSaveDialog by remember { mutableStateOf(false) }
    var saveMessage by remember { mutableStateOf("") }
    
    val scope = rememberCoroutineScope()
    
    // DynamoDBÏóêÏÑú ÌîÑÎ°úÌïÑ Î°úÎìú
    LaunchedEffect(isLoggedIn) {
        if (isLoggedIn) {
            profileRepository.loadProfile { success, profile ->
                if (success && profile != null) {
                    selectedGender = when(profile.sex) {
                        "MALE" -> "ÎÇ®ÏÑ±"
                        "FEMALE" -> "Ïó¨ÏÑ±"
                        else -> "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
                    }
                    ageInput = profile.age?.toString() ?: ""
                    weeklyGoalInput = profile.weeklyGoalStdDrinks?.toString() ?: ""
                }
            }
        } else {
            // Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉúÎ©¥ Ï¥àÍ∏∞Ìôî
            selectedGender = "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
            ageInput = ""
            weeklyGoalInput = ""
        }
    }
    
    var isInitialized by remember { mutableStateOf(false) }
    
    // Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌõÑÏóêÎßå UI ÌëúÏãú
    LaunchedEffect(Unit) {
        kotlinx.coroutines.delay(100) // ÏßßÏùÄ ÏßÄÏó∞ÏúºÎ°ú ÏÉÅÌÉú Î°úÎî© ÎåÄÍ∏∞
        isInitialized = true
    }
    
    if (!isInitialized) {
        // Î°úÎî© Ï§ë
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator()
        }
        return
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(AppBackground)
    ) {
        // Top Header - Ï∫òÎ¶∞ÎçîÏôÄ ÎèôÏùºÌïú Ïä§ÌÉÄÏùº
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(16.dp)
        ) {
            Text(
                text = "ÏÑ§Ï†ï",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
        }
        
        // Íµ¨Î∂ÑÏÑ†
        HorizontalDivider(
            color = DividerColor,
            thickness = 0.5.dp,
            modifier = Modifier.padding(horizontal = 16.dp)
        )
        
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState())
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Account Section
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = CardBackground),
                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "üë§",
                            fontSize = 16.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Í≥ÑÏ†ï",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold,
                            color = TextPrimary
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    if (isLoggedIn) {
                        // Î°úÍ∑∏Ïù∏Îêú ÏÉÅÌÉú
                        Text(
                            text = "ÏïàÎÖïÌïòÏÑ∏Ïöî, ${userName ?: "ÏÇ¨Ïö©Ïûê"}Îãò!",
                            style = MaterialTheme.typography.bodyMedium,
                            color = TextPrimary,
                            modifier = Modifier.padding(bottom = 12.dp)
                        )
                        Button(
                            onClick = { authManager.logout() },
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = MaterialTheme.colorScheme.error
                            ),
                            shape = RoundedCornerShape(8.dp)
                        ) {
                            Text(
                                text = "Î°úÍ∑∏ÏïÑÏõÉ",
                                fontWeight = FontWeight.Medium
                            )
                        }
                    } else {
                        // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú
                        Button(
                            onClick = onLoginClick,
                            modifier = Modifier.fillMaxWidth(),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Color.Black
                            ),
                            shape = RoundedCornerShape(8.dp)
                        ) {
                            Text(
                                text = "Î°úÍ∑∏Ïù∏",
                                color = Color.White,
                                fontWeight = FontWeight.Medium
                            )
                        }
                    }
                }
            }

            // Profile Section
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = CardBackground),
                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "üìù",
                            fontSize = 16.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "ÌîÑÎ°úÌïÑ",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold,
                            color = TextPrimary
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    // ÏÑ±Î≥Ñ ÏÑ†ÌÉù
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        listOf("ÎÇ®ÏÑ±", "Ïó¨ÏÑ±", "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå").forEach { gender ->
                            FilterChip(
                                onClick = { selectedGender = gender },
                                label = { 
                                    Text(
                                        text = gender,
                                        fontSize = 14.sp,
                                        fontWeight = FontWeight.Medium
                                    )
                                },
                                selected = selectedGender == gender,
                                modifier = Modifier.weight(1f),
                                colors = FilterChipDefaults.filterChipColors(
                                    selectedContainerColor = TabSelected.copy(alpha = 0.1f),
                                    selectedLabelColor = TabSelected,
                                    containerColor = Color.Transparent,
                                    labelColor = TabUnselected
                                )
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(12.dp))
                    
                    OutlinedTextField(
                        value = ageInput,
                        onValueChange = { ageInput = it },
                        label = { Text("Ïó∞Î†π") },
                        placeholder = { Text("ÎÇòÏù¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = TabSelected,
                            focusedLabelColor = TabSelected
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                    
                    Spacer(modifier = Modifier.height(12.dp))
                    
                    OutlinedTextField(
                        value = weeklyGoalInput,
                        onValueChange = { weeklyGoalInput = it },
                        label = { Text("Ï£ºÍ∞Ñ Î™©Ìëú (Ïûî)") },
                        placeholder = { Text("Ï£ºÍ∞Ñ Î™©Ìëú ÏûîÏàòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî") },
                        modifier = Modifier.fillMaxWidth(),
                        singleLine = true,
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedBorderColor = TabSelected,
                            focusedLabelColor = TabSelected
                        ),
                        shape = RoundedCornerShape(8.dp)
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Button(
                        onClick = { showSaveDialog = true },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color.Black
                        ),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text(
                            text = "ÌîÑÎ°úÌïÑ Ï†ÄÏû•",
                            color = Color.White,
                            fontWeight = FontWeight.Medium
                        )
                    }
                    
                    // Ï†ÄÏû• Î©îÏãúÏßÄ ÌëúÏãú
                    if (saveMessage.isNotEmpty()) {
                        Spacer(modifier = Modifier.height(12.dp))
                        Card(
                            colors = CardDefaults.cardColors(
                                containerColor = if (saveMessage.contains("Ïã§Ìå®")) 
                                    Color(0xFFFDEBEC) 
                                else 
                                    Color(0xFFE8F5E8)
                            ),
                            shape = RoundedCornerShape(8.dp)
                        ) {
                            Text(
                                text = saveMessage,
                                style = MaterialTheme.typography.bodySmall,
                                color = if (saveMessage.contains("Ïã§Ìå®")) 
                                    Color(0xFFC62828) 
                                else 
                                    Color(0xFF2E7D32),
                                modifier = Modifier.padding(12.dp)
                            )
                        }
                        
                        // 3Ï¥à ÌõÑ Î©îÏãúÏßÄ ÏûêÎèô ÏÇ≠Ï†ú
                        LaunchedEffect(saveMessage) {
                            if (saveMessage.isNotEmpty()) {
                                kotlinx.coroutines.delay(3000)
                                saveMessage = ""
                            }
                        }
                    }
                }
            }
            
            // Data Management Section
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = CardBackground),
                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "üóÇÔ∏è",
                            fontSize = 16.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold,
                            color = TextPrimary
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    SettingsItem(
                        title = "Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú",
                        subtitle = "Î™®Îì† Í∏∞Î°ùÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§",
                        onClick = { /* TODO: Data deletion */ },
                        isDestructive = true
                    )
                }
            }
            
            // Help Section
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = CardBackground),
                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "‚ùì",
                            fontSize = 16.sp
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "ÎèÑÏõÄÎßê",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.SemiBold,
                            color = TextPrimary
                        )
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    SettingsItem(
                        title = "Ïï± Ï†ïÎ≥¥",
                        subtitle = "Î≤ÑÏ†Ñ 1.0",
                        onClick = { /* TODO: App info */ }
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    SettingsItem(
                        title = "Î©¥Ï±Ö Í≥†ÏßÄ",
                        subtitle = "Ïù¥Ïö© ÏïΩÍ¥Ä Î∞è Ï£ºÏùòÏÇ¨Ìï≠",
                        onClick = { /* TODO: Disclaimer */ }
                    )
                }
            }
            
            // Disclaimer - Ï∫òÎ¶∞ÎçîÏôÄ ÎèôÏùºÌïú Ïä§ÌÉÄÏùº
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFFFF4E5)
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),
                shape = RoundedCornerShape(12.dp)
            ) {
                Row(
                    modifier = Modifier.padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "‚ö†Ô∏è",
                        fontSize = 24.sp,
                        modifier = Modifier.padding(end = 12.dp)
                    )
                    Text(
                        text = "Ïù¥ Ïï±ÏùÄ ÏùòÎ£å Î™©Ï†ÅÏù¥ ÏïÑÎãàÎ©∞, Ïö¥Ï†Ñ ÌåêÎã®Ïóê ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.\nÎ™®Îì† Îç∞Ïù¥ÌÑ∞Îäî Î°úÏª¨Ïóê Ï†ÄÏû•ÎêòÎ©∞ Ïô∏Î∂ÄÎ°ú Ï†ÑÏÜ°ÎêòÏßÄ ÏïäÏäµÎãàÎã§.",
                        style = MaterialTheme.typography.bodySmall,
                        color = TextPrimary,
                        lineHeight = 18.sp
                    )
                }
            }
        }
    }
    
    // ÌîÑÎ°úÌïÑ Ï†ÄÏû• ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
    if (showSaveDialog) {
        AlertDialog(
            onDismissRequest = { showSaveDialog = false },
            title = { 
                Text(
                    text = "ÌîÑÎ°úÌïÑ Ï†ÄÏû•",
                    fontWeight = FontWeight.SemiBold
                ) 
            },
            text = { 
                Text("ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏÑ±Î≥Ñ: $selectedGender\nÏó∞Î†π: ${ageInput.ifEmpty { "ÎØ∏ÏûÖÎ†•" }}\nÏ£ºÍ∞Ñ Î™©Ìëú: ${weeklyGoalInput.ifEmpty { "ÎØ∏ÏûÖÎ†•" }}Ïûî")
            },
            confirmButton = {
                Button(
                    onClick = {
                        scope.launch {
                            try {
                                // Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ ÌôïÏù∏
                                val currentLoginState = authManager.isLoggedIn.value
                                val userId = authManager.getUserId()
                                val token = authManager.getToken()
                                val userName = authManager.userName.value
                                
                                android.util.Log.d("SettingsScreen", "=== Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÎîîÎ≤ÑÍ∑∏ ===")
                                android.util.Log.d("SettingsScreen", "Compose isLoggedIn: $isLoggedIn")
                                android.util.Log.d("SettingsScreen", "AuthManager isLoggedIn: $currentLoginState")
                                android.util.Log.d("SettingsScreen", "ÏÇ¨Ïö©Ïûê ID: $userId")
                                android.util.Log.d("SettingsScreen", "ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ: $userName")
                                android.util.Log.d("SettingsScreen", "ÌÜ†ÌÅ∞ Ï°¥Ïû¨: ${token != null}")
                                android.util.Log.d("SettingsScreen", "ÌÜ†ÌÅ∞ Í∏∏Ïù¥: ${token?.length}")
                                
                                // AuthManagerÏùò Ïã§Ï†ú ÏÉÅÌÉú ÏÇ¨Ïö©
                                if (!currentLoginState || userId == null) {
                                    saveMessage = "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§ (ÏÉÅÌÉú: $currentLoginState, ID: $userId)"
                                    showSaveDialog = false
                                    return@launch
                                }
                                
                                // DynamoDBÏóê Ï†ÄÏû•
                                val genderValue = when(selectedGender) {
                                    "ÎÇ®ÏÑ±" -> "MALE"
                                    "Ïó¨ÏÑ±" -> "FEMALE"
                                    else -> "UNSET"
                                }
                                val ageValue = ageInput.toIntOrNull()
                                val goalValue = weeklyGoalInput.toIntOrNull()
                                
                                profileRepository.saveProfile(genderValue, ageValue, goalValue) { success, message ->
                                    android.util.Log.d("SettingsScreen", "DynamoDB Í≤∞Í≥º: success=$success, message=$message")
                                    if (success) {
                                        saveMessage = "ÌîÑÎ°úÌïÑÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!"
                                        // Ï†ÄÏû• ÏÑ±Í≥µ Ïãú ÌîÑÎ°úÌïÑ Îã§Ïãú Î°úÎìúÌïòÏó¨ ÎèôÍ∏∞Ìôî
                                        profileRepository.loadProfile { loadSuccess, profile ->
                                            if (loadSuccess && profile != null) {
                                                selectedGender = when(profile.sex) {
                                                    "MALE" -> "ÎÇ®ÏÑ±"
                                                    "FEMALE" -> "Ïó¨ÏÑ±"
                                                    else -> "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
                                                }
                                                ageInput = profile.age?.toString() ?: ""
                                                weeklyGoalInput = profile.weeklyGoalStdDrinks?.toString() ?: ""
                                            }
                                        }
                                    } else {
                                        saveMessage = "Ï†ÄÏû• Ïã§Ìå®: $message"
                                    }
                                }
                                
                                showSaveDialog = false
                            } catch (e: Exception) {
                                android.util.Log.e("SettingsScreen", "Ï†ÄÏû• Ïò§Î•ò", e)
                                saveMessage = "Ï†ÄÏû• Ïã§Ìå®: ${e.message}"
                                showSaveDialog = false
                            }
                        }
                    },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color.Black
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(
                        text = "Ï†ÄÏû•",
                        color = Color.White,
                        fontWeight = FontWeight.Medium
                    )
                }
            },
            dismissButton = {
                OutlinedButton(
                    onClick = { showSaveDialog = false },
                    colors = ButtonDefaults.outlinedButtonColors(
                        contentColor = TextSecondary
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Ï∑®ÏÜå")
                }
            },
            shape = RoundedCornerShape(16.dp)
        )
    }
}

@Composable
private fun SettingsItem(
    title: String,
    subtitle: String,
    onClick: () -> Unit,
    isDestructive: Boolean = false
) {
    TextButton(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        contentPadding = PaddingValues(vertical = 8.dp, horizontal = 0.dp),
        colors = ButtonDefaults.textButtonColors(
            contentColor = if (isDestructive) MaterialTheme.colorScheme.error else TextPrimary
        ),
        shape = RoundedCornerShape(8.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxWidth(),
            horizontalAlignment = Alignment.Start
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium,
                color = if (isDestructive) MaterialTheme.colorScheme.error else TextPrimary
            )
            Spacer(modifier = Modifier.height(2.dp))
            Text(
                text = subtitle,
                style = MaterialTheme.typography.bodySmall,
                color = if (isDestructive) MaterialTheme.colorScheme.error.copy(alpha = 0.7f) else TextSecondary
            )
        }
    }
}
