package com.hackathon.alcolook.ui.settings

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hackathon.alcolook.R
import com.hackathon.alcolook.ui.components.DropdownSettingsItem
import com.hackathon.alcolook.ui.components.rememberSettingsState
import com.hackathon.alcolook.ui.theme.*
import com.hackathon.alcolook.data.AuthManager
import com.hackathon.alcolook.data.repository.DynamoDBProfileRepository
import kotlinx.coroutines.launch

/**
 * ÏÑ§Ï†ï ÌôîÎ©¥ - UIÏôÄ Í∏∞Îä• ÌÜµÌï©
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    onLoginClick: () -> Unit = {}
) {
    val context = LocalContext.current
    val authManager = remember { AuthManager.getInstance(context) }
    val profileRepository = remember { DynamoDBProfileRepository(authManager) }
    val isLoggedIn by authManager.isLoggedIn.collectAsState()
    val userName by authManager.userName.collectAsState()
    
    // UI ÏÉÅÌÉú Í¥ÄÎ¶¨
    var showHelpDialog by remember { mutableStateOf(false) }
    var showSaveDialog by remember { mutableStateOf(false) }
    var saveMessage by remember { mutableStateOf("") }
    
    val genderState = rememberSettingsState(stringResource(R.string.gender_male))
    val ageInputState = rememberSettingsState("")
    val weeklyGoalInputState = rememberSettingsState("")
    val themeState = rememberSettingsState(stringResource(R.string.theme_system))
    
    val scope = rememberCoroutineScope()
    
    // DynamoDBÏóêÏÑú ÌîÑÎ°úÌïÑ Î°úÎìú
    LaunchedEffect(isLoggedIn) {
        if (isLoggedIn) {
            profileRepository.loadProfile { success, profile ->
                if (success && profile != null) {
                    genderState.value = when(profile.sex) {
                        "MALE" -> context.getString(R.string.gender_male)
                        "FEMALE" -> context.getString(R.string.gender_female)
                        else -> "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
                    }
                    ageInputState.value = profile.age?.toString() ?: ""
                    weeklyGoalInputState.value = profile.weeklyGoalStdDrinks?.toString() ?: ""
                }
            }
        } else {
            // Î°úÍ∑∏ÏïÑÏõÉ ÏÉÅÌÉúÎ©¥ Ï¥àÍ∏∞Ìôî
            genderState.value = "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
            ageInputState.value = ""
            weeklyGoalInputState.value = ""
        }
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5F5F5))
            .verticalScroll(rememberScrollState())
    ) {
        // Ìó§Îçî
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(Color.White)
                .padding(16.dp)
        ) {
            Text(
                text = "ÏÑ§Ï†ï",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
        }
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Í≥ÑÏ†ï ÏÑπÏÖò
        AccountSection(
            isLoggedIn = isLoggedIn,
            userName = userName,
            onLoginClick = onLoginClick,
            onLogoutClick = { authManager.logout() }
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Í∞úÏù∏ Ï†ïÎ≥¥ ÏÑπÏÖò (Í∏∞Ï°¥ alldata+calendar)
        PersonalInfoSection(
            genderState = genderState,
            ageInputState = ageInputState,
            weeklyGoalInputState = weeklyGoalInputState,
            themeState = themeState,
            onSaveClick = { showSaveDialog = true }
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨ ÏÑπÏÖò
        DataManagementSection()
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Ïï± Ï†ïÎ≥¥ ÏÑπÏÖò
        AppInfoSection(
            onHelpClick = { showHelpDialog = true }
        )
        
        Spacer(modifier = Modifier.height(100.dp))
    }
    
    // ÌîÑÎ°úÌïÑ Ï†ÄÏû• ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ (develop)
    if (showSaveDialog) {
        SaveProfileDialog(
            gender = genderState.value,
            age = ageInputState.value,
            weeklyGoal = weeklyGoalInputState.value,
            onDismiss = { showSaveDialog = false },
            onConfirm = {
                scope.launch {
                    val genderValue = when(genderState.value) {
                        context.getString(R.string.gender_male) -> "MALE"
                        context.getString(R.string.gender_female) -> "FEMALE"
                        else -> "UNSET"
                    }
                    val ageValue = ageInputState.value.toIntOrNull()
                    val goalValue = weeklyGoalInputState.value.toIntOrNull()
                    
                    if (!isLoggedIn || authManager.getUserId() == null) {
                        saveMessage = "Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§"
                        showSaveDialog = false
                        return@launch
                    }
                    
                    profileRepository.saveProfile(genderValue, ageValue, goalValue) { success, message ->
                        if (success) {
                            saveMessage = "ÌîÑÎ°úÌïÑÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!"
                        } else {
                            saveMessage = "Ï†ÄÏû• Ïã§Ìå®: $message"
                        }
                    }
                    showSaveDialog = false
                }
            }
        )
    }

    // ÎèÑÏõÄÎßê Îã§Ïù¥ÏñºÎ°úÍ∑∏ (alldata+calendar)
    if (showHelpDialog) {
        HelpDialog(
            onDismiss = { showHelpDialog = false }
        )
    }
}

@Composable
private fun AccountSection(
    isLoggedIn: Boolean,
    userName: String?,
    onLoginClick: () -> Unit,
    onLogoutClick: () -> Unit
) {
    Column(modifier = Modifier.padding(horizontal = 16.dp)) {
        Text(
            text = "Í≥ÑÏ†ï",
            modifier = Modifier.padding(vertical = 8.dp),
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray
        )
        
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(16.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp)
            ) {
                if (isLoggedIn) {
                    Text(
                        text = "ÏïàÎÖïÌïòÏÑ∏Ïöî, ${userName ?: "ÏÇ¨Ïö©Ïûê"}Îãò!",
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Medium,
                        color = Color.Black,
                        modifier = Modifier.padding(bottom = 12.dp)
                    )
                    Button(
                        onClick = onLogoutClick,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.error),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text(text = "Î°úÍ∑∏ÏïÑÏõÉ", fontWeight = FontWeight.Medium, color = Color.White)
                    }
                } else {
                    Button(
                        onClick = onLoginClick,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
                        shape = RoundedCornerShape(8.dp)
                    ) {
                        Text(text = "Î°úÍ∑∏Ïù∏", color = Color.White, fontWeight = FontWeight.Medium)
                    }
                }
            }
        }
    }
}

@Composable
private fun PersonalInfoSection(
    genderState: MutableState<String>,
    ageInputState: MutableState<String>,
    weeklyGoalInputState: MutableState<String>,
    themeState: MutableState<String>,
    onSaveClick: () -> Unit
) {
    Column {
        Text(
            text = "Í∞úÏù∏ Ï†ïÎ≥¥",
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray
        )
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(16.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                DropdownSettingsItem(
                    emoji = "üë§",
                    title = "ÏÑ±Î≥Ñ",
                    options = listOf(
                        stringResource(R.string.gender_male),
                        stringResource(R.string.gender_female),
                        "ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå"
                    ),
                    selectedValue = genderState.value,
                    onValueChange = { genderState.value = it }
                )
                
                OutlinedTextField(
                    value = ageInputState.value,
                    onValueChange = { ageInputState.value = it },
                    label = { Text("Ïó∞Î†π") },
                    placeholder = { Text("ÎÇòÏù¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = TabSelected,
                        focusedLabelColor = TabSelected
                    ),
                    shape = RoundedCornerShape(8.dp)
                )
                
                OutlinedTextField(
                    value = weeklyGoalInputState.value,
                    onValueChange = { weeklyGoalInputState.value = it },
                    label = { Text("Ï£ºÍ∞Ñ Î™©Ìëú (Ïûî)") },
                    placeholder = { Text("Ï£ºÍ∞Ñ Î™©Ìëú ÏûîÏàòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî") },
                    modifier = Modifier.fillMaxWidth(),
                    singleLine = true,
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = TabSelected,
                        focusedLabelColor = TabSelected
                    ),
                    shape = RoundedCornerShape(8.dp)
                )

                Button(
                    onClick = onSaveClick,
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text(text = "ÌîÑÎ°úÌïÑ Ï†ÄÏû•", color = Color.White, fontWeight = FontWeight.Medium)
                }
            }
        }
    }
}

@Composable
private fun DataManagementSection() {
    Column {
        Text(
            text = "Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨",
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray
        )
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(16.dp)
        ) {
            Column {
                SettingsItem(
                    icon = "üíæ",
                    title = "Îç∞Ïù¥ÌÑ∞ Î∞±ÏóÖ",
                    subtitle = "Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞",
                    onClick = { /* TODO */ }
                )
                
                HorizontalDivider(
                    color = Color(0xFFE0E0E0),
                    thickness = 0.5.dp,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
                
                SettingsItem(
                    icon = "üóëÔ∏è",
                    title = "Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†ú",
                    subtitle = "Î™®Îì† Í∏∞Î°ù ÏÇ≠Ï†ú",
                    onClick = { /* TODO */ }
                )
            }
        }
    }
}

@Composable
private fun AppInfoSection(
    onHelpClick: () -> Unit
) {
    Column {
        Text(
            text = "Ïï± Ï†ïÎ≥¥",
            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
            style = MaterialTheme.typography.titleMedium,
            color = Color.Gray
        )
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 16.dp),
            colors = CardDefaults.cardColors(containerColor = Color.White),
            elevation = CardDefaults.cardElevation(defaultElevation = 0.dp),
            shape = RoundedCornerShape(16.dp)
        ) {
            Column {
                SettingsItem(
                    icon = "‚ÑπÔ∏è",
                    title = "Ïï± Ï†ïÎ≥¥",
                    subtitle = "Î≤ÑÏ†Ñ 1.0.0",
                    onClick = { /* TODO */ }
                )
                
                HorizontalDivider(
                    color = Color(0xFFE0E0E0),
                    thickness = 0.5.dp,
                    modifier = Modifier.padding(horizontal = 16.dp)
                )
                
                SettingsItem(
                    icon = "‚ùì",
                    title = "ÎèÑÏõÄÎßê",
                    subtitle = "ÏÇ¨Ïö©Î≤ï Î∞è Î©¥Ï±Ö ÏÇ¨Ìï≠",
                    onClick = onHelpClick
                )
            }
        }
    }
}

@Composable
private fun SettingsItem(
    icon: String,
    title: String,
    subtitle: String? = null,
    onClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
            .padding(16.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = icon,
            fontSize = 20.sp,
            modifier = Modifier.size(24.dp)
        )
        
        Spacer(modifier = Modifier.width(12.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium,
                color = Color.Black
            )
            
            if (subtitle != null) {
                Text(
                    text = subtitle,
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Gray
                )
            }
        }
        
        Text(
            text = "‚ñ∂",
            fontSize = 16.sp,
            color = Color.Gray
        )
    }
}

@Composable
private fun SaveProfileDialog(
    gender: String,
    age: String,
    weeklyGoal: String,
    onDismiss: () -> Unit,
    onConfirm: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = "ÌîÑÎ°úÌïÑ Ï†ÄÏû•",
                fontWeight = FontWeight.SemiBold
            )
        },
        text = {
            Text("ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥Î•º Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÏÑ±Î≥Ñ: $gender\nÏó∞Î†π: ${age.ifEmpty { "ÎØ∏ÏûÖÎ†•" }}\nÏ£ºÍ∞Ñ Î™©Ìëú: ${weeklyGoal.ifEmpty { "ÎØ∏ÏûÖÎ†•" }}Ïûî")
        },
        confirmButton = {
            Button(
                onClick = onConfirm,
                colors = ButtonDefaults.buttonColors(containerColor = Color.Black),
                shape = RoundedCornerShape(8.dp)
            ) {
                Text(text = "Ï†ÄÏû•", color = Color.White, fontWeight = FontWeight.Medium)
            }
        },
        dismissButton = {
            OutlinedButton(
                onClick = onDismiss,
                colors = ButtonDefaults.outlinedButtonColors(contentColor = TextSecondary),
                shape = RoundedCornerShape(8.dp)
            ) {
                Text("Ï∑®ÏÜå")
            }
        },
        shape = RoundedCornerShape(16.dp)
    )
}

@Composable
private fun HelpDialog(
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Text(
                text = "ÎèÑÏõÄÎßê Î∞è Î©¥Ï±Ö ÏÇ¨Ìï≠",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = Color.Black
            )
        },
        text = {
            Column(
                modifier = Modifier.verticalScroll(rememberScrollState())
            ) {
                Text(
                    text = "ÏÇ¨Ïö© ÏïàÎÇ¥",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold,
                    color = Color(0xFF2196F3)
                )

                Spacer(modifier = Modifier.height(8.dp))

                Text(
                    text = "Î≥∏Í≤© Í≤∞Í≥ºÎäî Ï∞∏Í≥† ÏßÄÌëúÏûÖÎãàÎã§.",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.Black
                )

                Spacer(modifier = Modifier.height(16.dp))

                Text(
                    text = "Î≤ïÏ†Å Í≥†ÏßÄ Î∞è Î©¥Ï±Ö",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.SemiBold,
                    color = Color(0xFF2196F3)
                )

                Spacer(modifier = Modifier.height(8.dp))

                val disclaimerText = """
                    ‚Ä¢ Ïù¥ Ïï±ÏùÄ ÏùòÎ£åÍ∏∞Í∏∞/ÏßÑÎã® ÎèÑÍµ¨Í∞Ä ÏïÑÎãôÎãàÎã§. ÏßàÎ≥ëÏùò ÏßÑÎã®¬∑ÏπòÎ£å¬∑ÏòàÎ∞© Î™©Ï†ÅÏóê ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.
                    ‚Ä¢ Í≤∞Í≥ºÎäî ÌòàÏ§ëÏïåÏΩîÏò¨ÎÜçÎèÑ(BAC) Ï∏°Ï†ïÍ∏∞Î•º ÎåÄÏ≤¥ÌïòÏßÄ ÏïäÏäµÎãàÎã§.
                    ‚Ä¢ Ïö¥Ï†Ñ Í∞ÄÎä• Ïó¨Î∂Ä ÌåêÎã®Ïóê Ï†àÎåÄ ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
                    ‚Ä¢ Í≤∞Í≥ºÎäî Ï°∞Î™Ö¬∑Í∞ÅÎèÑ¬∑ÌëúÏ†ï Îì± ÌôòÍ≤ΩÏóê Îî∞Îùº Î∂ÄÏ†ïÌôïÌï† Ïàò ÏûàÏäµÎãàÎã§. Ïò§Ìåê Ï±ÖÏûÑÏùÄ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏûàÏäµÎãàÎã§.
                    ‚Ä¢ Ïù¥ Ïï±ÏùÄ Ïò®ÎîîÎ∞îÏù¥Ïä§Î°ú ÎèôÏûëÌïòÎ©∞, Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏÑúÎ≤Ñ Ï†ÑÏÜ°ÏùÑ ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏÑ§Ï†ïÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥ ÏÇ≠Ï†úÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§.
                    ‚Ä¢ ÏùëÍ∏â ÏÉÅÌô©(ÏïåÏΩîÏò¨ Ï§ëÎèÖ ÏùòÏã¨, ÏùòÏãù Ï†ÄÌïò Îì±)ÏóêÏÑúÎäî Ï¶âÏãú ÏßÄÏó≠ ÏùëÍ∏âÎ≤àÌò∏Î°ú Ïó∞ÎùΩÌïòÍ±∞ÎÇò ÏùòÎ£åÍ∏∞Í¥ÄÏùÑ Ïù¥Ïö©ÌïòÏÑ∏Ïöî.
                """.trimIndent()

                Text(
                    text = disclaimerText,
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Black,
                    lineHeight = 18.sp
                )

                Spacer(modifier = Modifier.height(16.dp))

                Text(
                    text = "Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨: ÏÑ§Ï†ï > Îç∞Ïù¥ÌÑ∞ Í¥ÄÎ¶¨",
                    style = MaterialTheme.typography.bodySmall,
                    color = Color.Gray
                )
            }
        },
        confirmButton = {
            TextButton(
                onClick = onDismiss,
                colors = ButtonDefaults.textButtonColors(
                    contentColor = Color(0xFF2196F3)
                )
            ) {
                Text(
                    text = "ÌôïÏù∏",
                    fontWeight = FontWeight.Medium
                )
            }
        },
        containerColor = Color.White,
        shape = RoundedCornerShape(16.dp)
    )
}

@Composable
private fun SettingsItem(
    title: String,
    subtitle: String,
    onClick: () -> Unit,
    isDestructive: Boolean = false
) {
    TextButton(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        contentPadding = PaddingValues(vertical = 8.dp, horizontal = 0.dp),
        colors = ButtonDefaults.textButtonColors(
            contentColor = if (isDestructive) MaterialTheme.colorScheme.error else TextPrimary
        ),
        shape = RoundedCornerShape(8.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxWidth(),
            horizontalAlignment = Alignment.Start
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium,
                color = if (isDestructive) MaterialTheme.colorScheme.error else TextPrimary
            )
            Spacer(modifier = Modifier.height(2.dp))
            Text(
                text = subtitle,
                style = MaterialTheme.typography.bodySmall,
                color = if (isDestructive) MaterialTheme.colorScheme.error.copy(alpha = 0.7f) else TextSecondary
            )
        }
    }
}