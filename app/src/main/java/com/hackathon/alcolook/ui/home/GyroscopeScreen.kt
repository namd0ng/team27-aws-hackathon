package com.hackathon.alcolook.ui.home

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.hackathon.alcolook.data.GyroscopeData
import com.hackathon.alcolook.GyroscopeManager
import com.hackathon.alcolook.WalkingTestResult
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GyroscopeScreen(
    faceAnalysisResult: Float?, // ÏñºÍµ¥ Î∂ÑÏÑù Í≤∞Í≥º
    heartRateData: com.hackathon.alcolook.data.HeartRateData?, // Ïã¨Î∞ïÏàò Îç∞Ïù¥ÌÑ∞
    onNextClick: (GyroscopeData?) -> Unit,
    onBackClick: () -> Unit
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val gyroscopeManager = remember { GyroscopeManager(context) }
    
    var gyroscopeData by remember { mutableStateOf<GyroscopeData?>(null) }
    var isTestStarted by remember { mutableStateOf(false) }
    var isTestRunning by remember { mutableStateOf(false) }
    var testResult by remember { mutableStateOf<WalkingTestResult?>(null) }
    var countdown by remember { mutableStateOf(0) }
    var showGuide by remember { mutableStateOf(true) }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(20.dp))
        
        // Ï†úÎ™©
        Text(
            text = "Í∑†ÌòïÍ∞êÍ∞Å Ï∏°Ï†ï (ÏÑ†ÌÉù)",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.onBackground
        )
        
        Spacer(modifier = Modifier.height(16.dp))
        
        // Ïù¥Ï†Ñ Ï∏°Ï†ï Í≤∞Í≥º ÏöîÏïΩ
        Card(
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            )
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Ï∏°Ï†ï ÏßÑÌñâ ÏÉÅÌô©",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold
                )
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly
                ) {
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üë§", fontSize = 20.sp)
                        Text(
                            text = if (faceAnalysisResult != null) "ÏôÑÎ£å" else "ÎåÄÍ∏∞",
                            fontSize = 12.sp,
                            color = if (faceAnalysisResult != null) 
                                MaterialTheme.colorScheme.primary 
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("‚ù§Ô∏è", fontSize = 20.sp)
                        Text(
                            text = if (heartRateData != null) "ÏôÑÎ£å" else "ÎåÄÍ∏∞",
                            fontSize = 12.sp,
                            color = if (heartRateData != null) 
                                MaterialTheme.colorScheme.primary 
                            else MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                    Column(horizontalAlignment = Alignment.CenterHorizontally) {
                        Text("üì±", fontSize = 20.sp)
                        Text(
                            text = if (gyroscopeData != null) "ÏôÑÎ£å" else "ÏßÑÌñâÏ§ë",
                            fontSize = 12.sp,
                            color = if (gyroscopeData != null) 
                                MaterialTheme.colorScheme.primary 
                            else MaterialTheme.colorScheme.tertiary
                        )
                    }
                }
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        // Î©îÏù∏ Ï∏°Ï†ï ÏòÅÏó≠
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .height(280.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surface
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
        ) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                when {
                    showGuide && !isTestStarted -> {
                        // Í∞ÄÏù¥Îìú ÌôîÎ©¥
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "Í∑†ÌòïÍ∞êÍ∞Å Ï∏°Ï†ï Î∞©Î≤ï",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.SemiBold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            
                            Spacer(modifier = Modifier.height(12.dp))
                            
                            // Í∞ÄÏù¥Îìú ÌÖçÏä§Ìä∏ (Ïù¥ÎØ∏ÏßÄ ÎåÄÏã†)
                            Text(
                                text = "üì±",
                                fontSize = 64.sp
                            )
                            
                            Spacer(modifier = Modifier.height(16.dp))
                            
                            Text(
                                text = "1. Ìï∏ÎìúÌè∞ÏùÑ ÏÜêÏóê Îì§Í≥† ÏÑúÏÑ∏Ïöî",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                            Text(
                                text = "2. ÎààÏùÑ Í∞êÍ≥† 10Ï¥àÍ∞Ñ Ï†úÏûêÎ¶¨Ïóê ÏÑúÏÑ∏Ïöî",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                            Text(
                                text = "3. ÌùîÎì§Î¶ºÏù¥ Ï†ÅÏùÑÏàòÎ°ù Ï¢ãÏùÄ Í≤∞Í≥ºÏûÖÎãàÎã§",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                    
                    countdown > 0 -> {
                        // Ïπ¥Ïö¥Ìä∏Îã§Ïö¥
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "Ï§ÄÎπÑÌïòÏÑ∏Ïöî",
                                fontSize = 18.sp,
                                fontWeight = FontWeight.SemiBold
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = countdown.toString(),
                                fontSize = 72.sp,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                        }
                    }
                    
                    isTestRunning -> {
                        // Ï∏°Ï†ï Ï§ë
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "Ï∏°Ï†ï Ï§ë...",
                                fontSize = 20.sp,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            CircularProgressIndicator(
                                modifier = Modifier.size(48.dp),
                                strokeWidth = 4.dp
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = "ÎààÏùÑ Í∞êÍ≥† Ï†úÏûêÎ¶¨Ïóê ÏÑúÏÑ∏Ïöî",
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                    
                    gyroscopeData != null -> {
                        // Ï∏°Ï†ï ÏôÑÎ£å Í≤∞Í≥º ÌëúÏãú
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Text(
                                text = "Ï∏°Ï†ï ÏôÑÎ£åÎê®!",
                                fontSize = 20.sp,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            
                            Spacer(modifier = Modifier.height(16.dp))
                            
                            Text(
                                text = "üìä",
                                fontSize = 48.sp
                            )
                            
                            Spacer(modifier = Modifier.height(8.dp))
                            
                            Text(
                                text = "ÌùîÎì§Î¶º Í∞ïÎèÑ: ${String.format("%.2f", gyroscopeData?.shakingIntensity ?: 0f)}",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Medium
                            )
                            
                            Text(
                                text = "ÏïàÏ†ïÏÑ± Ï†êÏàò: ${String.format("%.1f", (gyroscopeData?.stabilityScore ?: 0f) * 100)}%",
                                fontSize = 14.sp
                            )
                            
                            testResult?.let { result ->
                                val resultText = when (result) {
                                    WalkingTestResult.STABLE -> "ÏïàÏ†ïÏ†ÅÏù∏ Í∑†ÌòïÍ∞êÍ∞Å"
                                    WalkingTestResult.SLIGHTLY_UNSTABLE -> "ÏïΩÍ∞Ñ Î∂àÏïàÏ†ïÌïú Í∑†Ìòï"
                                    WalkingTestResult.UNSTABLE -> "Î∂àÏïàÏ†ïÌïú Í∑†ÌòïÍ∞êÍ∞Å"
                                    else -> "Ï∏°Ï†ï ÏôÑÎ£å"
                                }
                                
                                Text(
                                    text = resultText,
                                    fontSize = 12.sp,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                        }
                    }
                }
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        // Î≤ÑÌäºÎì§
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
            OutlinedButton(
                onClick = onBackClick,
                enabled = !isTestRunning,
                modifier = Modifier.weight(1f)
            ) {
                Text("Îí§Î°úÍ∞ÄÍ∏∞")
            }
            
            // Í±¥ÎÑàÎõ∞Í∏∞ Î≤ÑÌäº
            OutlinedButton(
                onClick = { 
                    onNextClick(null)
                },
                enabled = !isTestRunning,
                modifier = Modifier.weight(1f)
            ) {
                Text("Í±¥ÎÑàÎõ∞Í∏∞")
            }
        }
        
        Spacer(modifier = Modifier.height(12.dp))
        
        // Ï∏°Ï†ï ÏãúÏûë Î≤ÑÌäº (Ï∏°Ï†ï ÏôÑÎ£å Ïãú Ïà®ÍπÄ)
        if (gyroscopeData == null) {
            Button(
                onClick = {
                    if (!isTestStarted && !isTestRunning) {
                        // Ï∏°Ï†ï ÏãúÏûë
                        showGuide = false
                        isTestStarted = true
                        countdown = 3
                        
                        scope.launch {
                            // 3Ï¥à Ïπ¥Ïö¥Ìä∏Îã§Ïö¥
                            repeat(3) {
                                delay(1000)
                                countdown--
                            }
                            
                            // Ï∏°Ï†ï ÏãúÏûë
                            isTestRunning = true
                            gyroscopeManager.startRecording { result ->
                                testResult = result
                                gyroscopeData = com.hackathon.alcolook.data.GyroscopeData(
                                    shakingIntensity = when (result) {
                                        WalkingTestResult.STABLE -> 0.1f
                                        WalkingTestResult.SLIGHTLY_UNSTABLE -> 0.5f
                                        WalkingTestResult.UNSTABLE -> 0.9f
                                        else -> 0.3f
                                    },
                                    stabilityScore = when (result) {
                                        WalkingTestResult.STABLE -> 0.9f
                                        WalkingTestResult.SLIGHTLY_UNSTABLE -> 0.6f
                                        WalkingTestResult.UNSTABLE -> 0.3f
                                        else -> 0.5f
                                    },
                                    averageMovement = 0.2f,
                                    peakMovement = 0.8f
                                )
                                isTestRunning = false
                            }
                            
                            // 10Ï¥à ÌõÑ ÏûêÎèô Ï†ïÏßÄ
                            delay(10000)
                            if (isTestRunning) {
                                gyroscopeManager.stopRecording()
                            }
                        }
                    } else if (isTestRunning) {
                        // Ï∏°Ï†ï Ï§ëÎã®
                        gyroscopeManager.stopRecording()
                        isTestRunning = false
                    }
                },
                enabled = !isTestRunning || isTestRunning,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = when {
                        !isTestStarted -> "Ï∏°Ï†ï ÏãúÏûë"
                        isTestRunning -> "Ï∏°Ï†ï Ï§ë"
                        else -> "Ï∏°Ï†ï Ï§ÄÎπÑ Ï§ë"
                    },
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold
                )
            }
        }
        
        // Ï∏°Ï†ï ÏôÑÎ£å Ïãú Îã§Ïùå Î≤ÑÌäº
        if (gyroscopeData != null) {
            Spacer(modifier = Modifier.height(12.dp))
            Button(
                onClick = { onNextClick(gyroscopeData) },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Îã§ÏùåÏúºÎ°ú")
            }
        }
        
        Spacer(modifier = Modifier.weight(1f))
        
        // Î©¥Ï±Ö Í≥†ÏßÄ
        Text(
            text = "‚ö†Ô∏è Î≥∏ Ï∏°Ï†ï Í≤∞Í≥ºÎäî ÏùòÎ£å Î™©Ï†ÅÏù¥ ÏïÑÎãàÎ©∞, Ïö¥Ï†Ñ ÌåêÎã®Ïóê ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.",
            fontSize = 12.sp,
            color = MaterialTheme.colorScheme.onSurfaceVariant,
            textAlign = TextAlign.Center
        )
    }
}
